@model AkademikAi.Entity.Entites.AppUser
@{
    ViewData["Title"] = "Odaklanma Alanı - AkademikAI";
    var mainTopics = ViewBag.MainTopics as List<AkademikAi.Entity.Entites.Topics>;
    var questions = ViewBag.Questions as List<AkademikAi.Entity.Entites.Questions>;
    var currentUser = ViewBag.CurrentUser as AkademikAi.Entity.Entites.AppUser;
}

<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="~/css/dashboard.css" />
    <link rel="stylesheet" href="~/css/dashboard-new.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        /* Sonuç Ekranı Stilleri */
        .results-container {
            background-color: #fff;
            padding: 40px;
            border-radius: 12px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
            text-align: center;
            max-width: 600px;
            margin: 40px auto;
        }

            .results-container h2 {
                color: #2c3e50;
                margin-bottom: 20px;
                font-size: 2rem;
            }

        .results-stats {
            display: flex;
            justify-content: space-around;
            margin: 30px 0;
            font-size: 1.2rem;
        }

        .stat-item {
            display: flex;
            flex-direction: column;
            align-items: center;
        }

            .stat-item .stat-value {
                font-size: 2.5rem;
                font-weight: 700;
            }

            .stat-item .stat-label {
                color: #7f8c8d;
                font-size: 1rem;
            }

        #resultsCorrect .stat-value {
            color: #2ecc71;
        }

        #resultsIncorrect .stat-value {
            color: #e74c3c;
        }

        #resultsPercentage .stat-value {
            color: #3498db;
        }

        .results-actions {
            margin-top: 30px;
            display: flex;
            justify-content: center;
            gap: 20px;
        }
    </style>
</head>
<body>
    <div class="dashboard-container">
        <!-- Sidebar -->
        <aside class="sidebar">
            <div class="sidebar-header">
                <h2 class="logo">AkademikAI</h2>
            </div>
            <nav class="sidebar-nav">
                <a href="@Url.Action("Dashboard", "User")" class="nav-link">
                    <i class="fas fa-compass"></i>
                    <span>Pusulanız</span>
                </a>
                <a href="@Url.Action("Solve", "User")" class="nav-link active">
                    <i class="fas fa-brain"></i>
                    <span>Odaklanma Alanı</span>
                </a>
                <a href="@Url.Action("Performance", "User")" class="nav-link">
                    <i class="fas fa-chart-line"></i>
                    <span>MR Sonuçlarınız</span>
                </a>
                <a href="@Url.Action("Exams", "User")" class="nav-link">
                    <i class="fas fa-clipboard-check"></i>
                    <span>Simülasyon Merkezi</span>
                </a>
                <a href="@Url.Action("Profile", "User")" class="nav-link">
                    <i class="fas fa-user-circle"></i>
                    <span>Kişisel Alan</span>
                </a>
            </nav>
            <div class="sidebar-footer">
                <form asp-action="Logout" asp-controller="User" method="post" style="display: inline;">
                    <button type="submit" class="logout-btn">
                        <i class="fas fa-sign-out-alt"></i>
                        <span>Çıkış Yap</span>
                    </button>
                </form>
            </div>
        </aside>

        <!-- Main Content -->
        <main class="main-content">
            <!-- Header Bar -->
            <div class="solve-header" id="solveHeader">
                <div class="header-left">
                    <h2 id="currentTopic">Tüm Konular</h2>
                    <span class="question-progress">Soru <span id="currentQuestionNumber">1</span> / <span id="totalQuestions">0</span></span>
                </div>
                <div class="header-right">
                    <div class="timer">
                        <i class="fas fa-clock"></i>
                        <span id="timer">00:00</span>
                    </div>
                    <button class="btn-exit">
                        <i class="fas fa-times"></i>
                        Çıkış
                    </button>
                </div>
            </div>

            <!-- Question Area -->
            <section class="filters-section" id="filtersSection">
                <div class="filter-container">
                    <div class="filter-group">
                        <label for="course-filter">Ana Konu:</label>
                        <select id="course-filter" class="filter-select">
                            <option value="">Tüm Konular</option>
                            @if (mainTopics != null)
                            {
                                foreach (var topic in mainTopics)
                                {
                                    <option value="@topic.Id">@topic.TopicName</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="filter-group">
                        <label for="topic-filter">Alt Konu:</label>
                        <select id="topic-filter" class="filter-select" disabled>
                            <option value="">Önce ana konu seçin</option>
                        </select>
                    </div>
                    <div class="filter-group">
                        <button id="loadQuestions" class="btn-action btn-primary">
                            <i class="fas fa-search"></i>
                            Soruları Yükle
                        </button>
                    </div>
                </div>
            </section>

            <div class="question-container" id="questionContainer" style="display: none;">
                <div class="question-content">
                    <div class="question-text">
                        <h3 id="questionTitle">Soru 1</h3>
                        <p id="questionText">Lütfen bir konu seçin ve soruları yükleyin.</p>
                        <div class="question-image" id="questionImage" style="display: none;">
                            <!-- Resim buraya gelecek -->
                        </div>
                    </div>

                    <div class="options-container" id="optionsContainer">
                        <!-- Seçenekler buraya gelecek -->
                    </div>
                </div>

                <!-- Action Buttons -->
                <div class="action-buttons">
                    <button class="btn-action btn-secondary" id="showSolution" style="display: none;">
                        <i class="fas fa-lightbulb"></i>
                        Çözümü Gör
                    </button>
                    <div class="navigation-buttons">
                        <button class="btn-action btn-secondary" id="prevQuestion" disabled>
                            <i class="fas fa-chevron-left"></i>
                            Önceki Soru
                        </button>
                        <button class="btn-action btn-primary" id="nextQuestion" disabled>
                            Sonraki Soru
                            <i class="fas fa-chevron-right"></i>
                        </button>
                    </div>
                </div>

                <!-- Solution Area -->
                <div class="solution-area" id="solutionArea" style="display: none;">
                    <div class="solution-header">
                        <h4><i class="fas fa-check-circle"></i> Çözüm</h4>
                        <button class="btn-close-solution" id="closeSolution">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    <div class="solution-content">
                        <p id="correctAnswer"></p>
                        <p id="solutionText"></p>
                    </div>
                </div>
            </div>

            <!-- Progress Bar -->
            <div class="progress-container" id="progressContainer" style="display: none;">
                <div class="progress-bar">
                    <div class="progress-fill" style="width: 0%;"></div>
                </div>
                <div class="progress-text">0 / 0 soru tamamlandı</div>
            </div>

            <!-- Results Screen -->
            <div class="results-container" id="resultsContainer" style="display: none;">
                <h2>Odaklanma Alanı Sonucu</h2>
                <div class="results-stats">
                    <div class="stat-item" id="resultsCorrect">
                        <span class="stat-value">0</span>
                        <span class="stat-label">Doğru</span>
                    </div>
                    <div class="stat-item" id="resultsIncorrect">
                        <span class="stat-value">0</span>
                        <span class="stat-label">Yanlış</span>
                    </div>
                    <div class="stat-item" id="resultsNullCorrect">
                        <span class="stat-value">0</span>
                        <span class="stat-label">Boş</span>
                    </div>
                    <div class="stat-item" id="resultsPercentage">
                        <span class="stat-value">0%</span>
                        <span class="stat-label">Başarı</span>
                    </div>
                </div>
                <div class="results-actions">
                    <button id="restartTest" class="btn-action btn-secondary">
                        <i class="fas fa-redo"></i> Yeniden Başla
                    </button>
                    <a href="@Url.Action("Dashboard", "User")" class="btn-action btn-primary">
                        <i class="fas fa-compass"></i> Pusulaya Dön
                    </a>
                </div>
            </div>

        </main>
    </div>

    <script>
        let selectedOption = null;
        let currentQuestionIndex = 0;
        let questions = [];
        let totalQuestions = 0;
        let userAnswers = []; // Kullanıcı cevaplarını tutmak için dizi
        let timeLeft = 15 * 60; // 15 dakika
        let timerInterval;
        let nullOption=0;

        const filtersSection = document.getElementById('filtersSection');
        const questionContainer = document.getElementById('questionContainer');
        const progressContainer = document.getElementById('progressContainer');
        const resultsContainer = document.getElementById('resultsContainer');
        const solveHeader = document.getElementById('solveHeader');

        // Timer functionality
        function updateTimer() {
            const minutes = Math.floor(timeLeft / 60);
            const seconds = timeLeft % 60;
            document.getElementById('timer').textContent =
                `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;

            if (timeLeft <= 0) {
                clearInterval(timerInterval);
                alert('Süre doldu!');
                showResults();
                return;
            }

            timeLeft--;
        }

        // Alt konuları yükle
        document.getElementById('course-filter').addEventListener('change', function () {
            const mainTopicId = this.value;
            const subTopicSelect = document.getElementById('topic-filter');

            if (mainTopicId) {
                fetch(`/User/GetSubTopics?parentTopicId=${mainTopicId}`)
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            subTopicSelect.innerHTML = '<option value="">Tüm Alt Konular</option>';
                            data.subTopics.forEach(topic => {
                                subTopicSelect.innerHTML += `<option value="${topic.id}">${topic.name}</option>`;
                            });
                            subTopicSelect.disabled = false;
                        } else {
                            subTopicSelect.innerHTML = '<option value="">Alt konu bulunamadı</option>';
                            subTopicSelect.disabled = true;
                        }
                    })
                    .catch(error => {
                        console.error('Alt konular yüklenirken hata:', error);
                        subTopicSelect.innerHTML = '<option value="">Hata oluştu</option>';
                        subTopicSelect.disabled = true;
                    });
            } else {
                subTopicSelect.innerHTML = '<option value="">Önce ana konu seçin</option>';
                subTopicSelect.disabled = true;
            }
        });

        // Soruları yükle
        document.getElementById('loadQuestions').addEventListener('click', function () {
            const mainTopicId = document.getElementById('course-filter').value;
            const subTopicId = document.getElementById('topic-filter').value;
            const topicId = subTopicId || mainTopicId;

            if (!topicId) {
                alert('Lütfen bir konu seçin!');
                return;
            }

            this.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Yükleniyor...';
            this.disabled = true;

            fetch(`/User/GetFilteredQuestions?topicId=${topicId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success && data.questions.length > 0) {
                        questions = data.questions;
                        totalQuestions = questions.length;
                        currentQuestionIndex = 0;
                        userAnswers = new Array(totalQuestions).fill(null); // Cevap dizisini sıfırla

                        // UI'ı hazırla
                        filtersSection.style.display = 'none';
                        questionContainer.style.display = 'block';
                        progressContainer.style.display = 'block';

                        updateQuestionDisplay();
                        updateProgress();

                        // Timer'ı başlat
                        if (timerInterval) clearInterval(timerInterval);
                        timeLeft = (totalQuestions * 1.5) * 60; // Soru başına 1.5 dakika
                        timerInterval = setInterval(updateTimer, 1000);
                        updateTimer(); // İlk saniyeyi göstermek için

                        const selectedOption = document.getElementById('topic-filter').options[document.getElementById('topic-filter').selectedIndex];
                        document.getElementById('currentTopic').textContent = selectedOption.value ? selectedOption.text : document.getElementById('course-filter').options[document.getElementById('course-filter').selectedIndex].text;

                        document.getElementById('prevQuestion').disabled = true;
                        document.getElementById('nextQuestion').disabled = false;

                    } else {
                        alert('Seçilen konuda soru bulunamadı!');
                    }
                })
                .catch(error => {
                    console.error('Sorular yüklenirken hata:', error);
                    alert('Sorular yüklenirken hata oluştu!');
                })
                .finally(() => {
                    this.innerHTML = '<i class="fas fa-search"></i> Soruları Yükle';
                    this.disabled = false;
                });
        });

        function updateQuestionDisplay() {
            if (questions.length === 0) return;

            const question = questions[currentQuestionIndex];
            document.getElementById('questionTitle').textContent = `Soru ${currentQuestionIndex + 1}`;
            document.getElementById('questionText').textContent = question.questionText;

            const optionsContainer = document.getElementById('optionsContainer');
            optionsContainer.innerHTML = '';

            if (question.options && question.options.length > 0) {
                question.options.forEach(option => {
                    const optionBtn = document.createElement('button');
                    optionBtn.className = 'option-btn';
                    optionBtn.setAttribute('data-option-id', option.id);
                    optionBtn.innerHTML = `<span class="option-label">${option.label}</span><span class="option-text">${option.text}</span>`;
                    optionBtn.addEventListener('click', () => handleOptionSelection(optionBtn, option.isCorrect));
                    optionsContainer.appendChild(optionBtn);
                });
            }

            document.getElementById('solutionText').textContent = question.solutionText;
            const correctOption = question.options?.find(o => o.isCorrect);
            if (correctOption) {
                document.getElementById('correctAnswer').innerHTML = `<strong>Doğru Cevap: ${correctOption.label}</strong>`;
            }

            document.getElementById('currentQuestionNumber').textContent = currentQuestionIndex + 1;
            document.getElementById('totalQuestions').textContent = totalQuestions;

            document.getElementById('prevQuestion').disabled = (currentQuestionIndex === 0);
            document.getElementById('nextQuestion').textContent = (currentQuestionIndex === totalQuestions - 1) ? 'Testi Bitir' : 'Sonraki Soru';
             if (currentQuestionIndex === totalQuestions - 1) {
                document.getElementById('nextQuestion').innerHTML = 'Testi Bitir <i class="fas fa-flag-checkered"></i>';
            } else {
                document.getElementById('nextQuestion').innerHTML = 'Sonraki Soru <i class="fas fa-chevron-right"></i>';
            }
        }

        function handleOptionSelection(selectedButton, isCorrect) {
            if (userAnswers[currentQuestionIndex] !== null) return; // Zaten cevaplanmışsa tekrar işlem yapma

            userAnswers[currentQuestionIndex] = isCorrect;

            // Tüm butonları kilitle
            document.querySelectorAll('.option-btn').forEach(btn => {
                btn.disabled = true;
            });

            selectedButton.classList.add('selected');

            setTimeout(() => {
                if (isCorrect) {
                    selectedButton.classList.add('correct');
                } else {
                    selectedButton.classList.add('incorrect');
                    // Doğru olanı göster
                    questions[currentQuestionIndex].options.forEach((opt, index) => {
                        if (opt.isCorrect) {
                            document.querySelectorAll('.option-btn')[index].classList.add('correct');
                        }
                    });
                }
                document.getElementById('showSolution').style.display = 'inline-flex';
            }, 500);
        }

        function updateProgress() {
            const answeredCount = userAnswers.filter(a => a !== null).length;
            const progressPercentage = totalQuestions > 0 ? (answeredCount / totalQuestions) * 100 : 0;
            document.querySelector('.progress-fill').style.width = `${progressPercentage}%`;
            document.querySelector('.progress-text').textContent = `${answeredCount} / ${totalQuestions} soru tamamlandı`;
        }

        document.getElementById('showSolution').addEventListener('click', function () {
            document.getElementById('solutionArea').style.display = 'block';
        });

        document.getElementById('closeSolution').addEventListener('click', function () {
            document.getElementById('solutionArea').style.display = 'none';
        });

        document.getElementById('prevQuestion').addEventListener('click', function () {
            if (currentQuestionIndex > 0) {
                currentQuestionIndex--;
                updateQuestionDisplay();
                resetQuestionUI();
            }
        });

        document.getElementById('nextQuestion').addEventListener('click', function () {
            // Cevap verilmemişse yanlış say
            if (userAnswers[currentQuestionIndex] === null) {
                userAnswers[currentQuestionIndex] = nullOption;
                nullOption+=1;
            }
            updateProgress();

            if (currentQuestionIndex < totalQuestions - 1) {
                currentQuestionIndex++;
                updateQuestionDisplay();
                resetQuestionUI();
            } else {
                showResults();
            }
        });

        function resetQuestionUI() {
            document.querySelectorAll('.option-btn').forEach(btn => {
                btn.classList.remove('selected', 'correct', 'incorrect');
                btn.disabled = false;
            });
            document.getElementById('solutionArea').style.display = 'none';
            document.getElementById('showSolution').style.display = 'none';
            selectedOption = null;
        }

        function showResults() {
            clearInterval(timerInterval); // Zamanlayıcıyı durdur

            // UI elemanlarını gizle/göster
            questionContainer.style.display = 'none';
            progressContainer.style.display = 'none';
            solveHeader.style.display = 'none';
            filtersSection.style.display = 'none';
            resultsContainer.style.display = 'block';

            // İstatistikleri hesapla
            const correctCount = userAnswers.filter(answer => answer === true).length;
            const incorrectCount = totalQuestions - (correctCount+nullOption);
            const nullcorrectCount=nullOption;
            const percentage = totalQuestions > 0 ? Math.round((correctCount / totalQuestions) * 100) : 0;

            // Sonuçları ekrana yazdır
            document.querySelector('#resultsCorrect .stat-value').textContent = correctCount;
            document.querySelector('#resultsIncorrect .stat-value').textContent = incorrectCount;
            document.querySelector('#resultsNullCorrect .stat-value').textContent = nullcorrectCount;
            document.querySelector('#resultsPercentage .stat-value').textContent = `${percentage}%`;
        }

        document.getElementById('restartTest').addEventListener('click', function() {
            window.location.reload(); // Sayfayı yenileyerek testi baştan başlat
        });

        document.querySelector('.btn-exit').addEventListener('click', function () {
            if (confirm('Sınavdan çıkmak istediğinizden emin misiniz? İlerlemeniz kaydedilmeyecek.')) {
                if (timerInterval) clearInterval(timerInterval);
                window.location.href = '@Url.Action("Dashboard", "User")';
            }
        });
    </script>
</body>
</html>