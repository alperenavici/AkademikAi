@model AkademikAi.Entity.Entites.AppUser
@{
    ViewData["Title"] = "Simülasyon Merkezi - AkademikAI";
    // Bu kısım sınav seçimine göre dinamik olarak doldurulabilir.
    // Şimdilik ana dersleri temsil ettiğini varsayalım.
    var mainTopics = ViewBag.MainTopics as List<AkademikAi.Entity.Entites.Topics>;
}

<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="~/css/dashboard.css" />
    <link rel="stylesheet" href="~/css/dashboard-new.css" />
    @* Yeni CSS dosyanız veya stil etiketiniz *@
    <link rel="stylesheet" href="~/css/exam-simulation.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

    @* Sayfa içi stiller (Ayrı bir CSS dosyasına taşınması önerilir) *@
    <style>
        .main-content {
            display: flex;
            flex-direction: column;
            height: calc(100vh - 60px); /* Header yüksekliği varsayılarak */
        }

        /* Sınav Seçim Alanı */
        #examSelectionContainer {
            background-color: #fff;
            padding: 40px;
            border-radius: 12px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.05);
            text-align: center;
            max-width: 600px;
            margin: auto;
        }

            #examSelectionContainer h2 {
                margin-bottom: 25px;
                color: #2c3e50;
            }

        .selection-group {
            margin-bottom: 20px;
        }

            .selection-group label {
                display: block;
                margin-bottom: 8px;
                font-weight: 600;
                color: #34495e;
            }

        .selection-select {
            width: 100%;
            padding: 12px;
            border: 1px solid #ddd;
            border-radius: 8px;
            font-size: 1rem;
        }

        #startExamBtn {
            width: 100%;
            padding: 15px;
            font-size: 1.1rem;
            font-weight: bold;
            background-color: #3498db;
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

            #startExamBtn:hover {
                background-color: #2980b9;
            }

            #startExamBtn:disabled {
                background-color: #bdc3c7;
                cursor: not-allowed;
            }

        /* Sınav Alanı */
        #examArea {
            display: none;
            flex-grow: 1;
            flex-direction: column;
        }

        .exam-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px 20px;
            background-color: #fff;
            border-bottom: 1px solid #e0e0e0;
        }

        .exam-header-left h2 {
            font-size: 1.5rem;
            color: #2c3e50;
        }

        .exam-header-left .question-progress {
            color: #7f8c8d;
        }

        .exam-header-right {
            display: flex;
            align-items: center;
            gap: 20px;
        }

        .timer {
            font-size: 1.2rem;
            font-weight: 600;
            color: #e74c3c;
        }

        .exam-body {
            display: flex;
            flex-grow: 1;
            gap: 20px;
            padding: 20px;
            overflow-y: hidden;
        }

        /* Soru Paneli */
        .question-panel {
            flex: 3;
            display: flex;
            flex-direction: column;
            background-color: #fff;
            border-radius: 12px;
            padding: 25px;
            overflow-y: auto;
        }

        .question-content {
            flex-grow: 1;
        }

        .option-btn {
            display: flex;
            width: 100%;
            padding: 15px;
            margin-bottom: 10px;
            text-align: left;
            border: 1px solid #ddd;
            border-radius: 8px;
            background-color: #fff;
            cursor: pointer;
            transition: all 0.2s;
        }

            .option-btn:hover {
                border-color: #3498db;
                background-color: #f8f9fa;
            }

            .option-btn.selected {
                border-color: #3498db;
                background-color: #eaf5fc;
                font-weight: bold;
            }

        .option-label {
            margin-right: 15px;
            font-weight: bold;
        }

        .question-actions {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 20px;
            border-top: 1px solid #eee;
            padding-top: 20px;
        }

        .nav-buttons {
            display: flex;
            gap: 10px;
        }

        .btn-action.btn-flag.flagged {
            background-color: #f39c12;
            color: white;
        }

        /* Optik Form Paneli */
        .answer-sheet-panel {
            flex: 1;
            background-color: #fff;
            border-radius: 12px;
            padding: 20px;
            display: flex;
            flex-direction: column;
            overflow-y: auto;
        }

            .answer-sheet-panel h4 {
                margin-top: 0;
                border-bottom: 1px solid #eee;
                padding-bottom: 10px;
            }

        .answer-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(40px, 1fr));
            gap: 8px;
        }

        .answer-grid-item {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 40px;
            border: 1px solid #ccc;
            border-radius: 5px;
            cursor: pointer;
            transition: all 0.2s;
            position: relative;
        }

            .answer-grid-item:hover {
                background-color: #f0f0f0;
            }

            .answer-grid-item.current {
                border-color: #e74c3c;
                border-width: 2px;
                font-weight: bold;
            }

            .answer-grid-item.answered {
                background-color: #2ecc71;
                color: white;
                border-color: #27ae60;
            }

            .answer-grid-item.skipped {
                background-color: #ecf0f1;
            }

        .flag-indicator {
            position: absolute;
            top: 2px;
            right: 2px;
            color: #f39c12;
            font-size: 0.7rem;
        }

        /* Sonuç Alanı */
        #resultsContainer {
            display: none;
            text-align: center;
        }

        .results-stats {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin: 30px 0;
        }

        .stat-item {
            background-color: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
            min-width: 120px;
        }

        .stat-value {
            font-size: 2rem;
            font-weight: bold;
            display: block;
        }

        .stat-label {
            color: #555;
        }

        #resultsCorrect .stat-value {
            color: #2ecc71;
        }

        #resultsIncorrect .stat-value {
            color: #e74c3c;
        }

        #resultsBlank .stat-value {
            color: #95a5a6;
        }

        #resultsNet .stat-value {
            color: #3498db;
        }

    </style>
</head>
<body>
    <div class="dashboard-container">
        <!-- Sidebar -->
        <aside class="sidebar">
            <div class="sidebar-header">
                <h2 class="logo">AkademikAI</h2>
            </div>
            <nav class="sidebar-nav">
                <a href="@Url.Action("Dashboard", "User")" class="nav-link">
                    <i class="fas fa-compass"></i>
                    <span>Pusulanız</span>
                </a>
                <a href="@Url.Action("Solve", "User")" class="nav-link">
                    <i class="fas fa-brain"></i>
                    <span>Odaklanma Alanı</span>
                </a>
                <a href="@Url.Action("Performance", "User")" class="nav-link">
                    <i class="fas fa-chart-line"></i>
                    <span>MR Sonuçlarınız</span>
                </a>
                <a href="@Url.Action("Exams", "User")" class="nav-link active">
                    <i class="fas fa-clipboard-check"></i>
                    <span>Simülasyon Merkezi</span>
                </a>
                <a href="@Url.Action("Profile", "User")" class="nav-link">
                    <i class="fas fa-user-circle"></i>
                    <span>Kişisel Alan</span>
                </a>
            </nav>
            <div class="sidebar-footer">
                <form asp-action="Logout" asp-controller="User" method="post" style="display: inline;">
                    <button type="submit" class="logout-btn">
                        <i class="fas fa-sign-out-alt"></i>
                        <span>Çıkış Yap</span>
                    </button>
                </form>
            </div>
        </aside>

        <!-- Main Content -->
        <main class="main-content">

            <!-- Sınav Seçim Ekranı -->
            <section id="examSelectionContainer">
                <h2>Simülasyon Merkezi</h2>
                <p>Gerçek sınav deneyimi için bir deneme seçin.</p>
                <div class="selection-group">
                    <label for="exam-type-select">Sınav Türü:</label>
                    <select id="exam-type-select" class="selection-select">
                        <option value="">Sınav Türü Seçin</option>
                        <option value="TYT">TYT</option>
                        <option value="AYT">AYT</option>
                    </select>
                </div>
                <div class="selection-group">
                    <label for="subject-select">Ders:</label>
                    <select id="subject-select" class="selection-select" disabled>
                        <option value="">Önce Sınav Türü Seçin</option>
                    </select>
                </div>
                <button id="startExamBtn" class="btn-action btn-primary" disabled>
                    <i class="fas fa-play-circle"></i> Denemeye Başla
                </button>
            </section>

            <!-- Sınav Alanı -->
            <div id="examArea">
                <!-- Sınav Header -->
                <div class="exam-header">
                    <div class="exam-header-left">
                        <h2 id="examTitle">TYT - Türkçe</h2>
                        <span class="question-progress">Soru <span id="currentQuestionNumber">1</span> / <span id="totalQuestions">40</span></span>
                    </div>
                    <div class="exam-header-right">
                        <div class="timer">
                            <i class="fas fa-clock"></i>
                            <span id="timer">00:00:00</span>
                        </div>
                        <button id="finishExamBtn" class="btn-action btn-danger">
                            <i class="fas fa-flag-checkered"></i>
                            Testi Bitir
                        </button>
                    </div>
                </div>

                <div class="exam-body">
                    <!-- Soru Paneli -->
                    <div class="question-panel">
                        <div class="question-content">
                            <h3 id="questionTitle">Soru 1</h3>
                            <p id="questionText">Lütfen bir deneme seçerek başlayın.</p>
                            <div class="question-image" id="questionImage" style="display: none;"></div>
                        </div>
                        <div class="options-container" id="optionsContainer"></div>
                        <div class="question-actions">
                            <div class="left-actions">
                                <button class="btn-action btn-secondary btn-flag" id="flagQuestionBtn">
                                    <i class="far fa-flag"></i> <span>Soruyu İşaretle</span>
                                </button>
                                <button class="btn-action btn-secondary" id="clearAnswerBtn">
                                    <i class="fas fa-eraser"></i> Cevabı Temizle
                                </button>
                            </div>
                            <div class="nav-buttons">
                                <button class="btn-action btn-secondary" id="prevQuestionBtn" disabled>
                                    <i class="fas fa-chevron-left"></i> Önceki
                                </button>
                                <button class="btn-action btn-primary" id="nextQuestionBtn" disabled>
                                    Sonraki <i class="fas fa-chevron-right"></i>
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- Optik Form Paneli -->
                    <div class="answer-sheet-panel">
                        <h4>Optik Form</h4>
                        <div class="answer-grid" id="answerGrid">
                            <!-- Numaralar JS ile oluşturulacak -->
                        </div>
                    </div>
                </div>
            </div>

            <!-- Sonuç Ekranı -->
            <div class="results-container" id="resultsContainer">
                <h2>Deneme Sonucu</h2>
                <div class="results-stats">
                    <div class="stat-item" id="resultsCorrect">
                        <span class="stat-value">0</span><span class="stat-label">Doğru</span>
                    </div>
                    <div class="stat-item" id="resultsIncorrect">
                        <span class="stat-value">0</span><span class="stat-label">Yanlış</span>
                    </div>
                    <div class="stat-item" id="resultsBlank">
                        <span class="stat-value">0</span><span class="stat-label">Boş</span>
                    </div>
                    <div class="stat-item" id="resultsNet">
                        <span class="stat-value">0.00</span><span class="stat-label">Net</span>
                    </div>
                </div>

                <form id="submitResultsForm" asp-action="SubmitSolve" asp-controller="User" method="post" style="display: none;">
                    <input type="hidden" id="userAnswersData" name="userAnswers" />
                </form>

                <div class="results-actions">
                    <button id="saveResults" class="btn-action btn-primary"><i class="fas fa-save"></i> Sonuçları Kaydet</button>
                    <a href="@Url.Action("Solve", "User")" class="btn-action btn-secondary"><i class="fas fa-redo"></i> Yeni Deneme</a>
                    <a href="@Url.Action("Dashboard", "User")" class="btn-action btn-secondary"><i class="fas fa-compass"></i> Pusulaya Dön</a>
                </div>
            </div>

        </main>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // --- STATE MANAGEMENT ---
            let currentQuestionIndex = 0;
            let questions = [];
            let userAnswers = []; // { questionId, selectedOptionId, isFlagged, status ('unseen', 'answered', 'skipped') }
            let timerInterval;

            // --- UI ELEMENTS ---
            const examSelectionContainer = document.getElementById('examSelectionContainer');
            const examArea = document.getElementById('examArea');
            const resultsContainer = document.getElementById('resultsContainer');
            const startExamBtn = document.getElementById('startExamBtn');
            const examTypeSelect = document.getElementById('exam-type-select');
            const subjectSelect = document.getElementById('subject-select');

            // --- EXAM SELECTION LOGIC ---
            const examSubjects = {
                "TYT": [{id: 1, name: "Türkçe"}, {id: 2, name: "Sosyal Bilimler"}, {id: 3, name: "Temel Matematik"}, {id: 4, name: "Fen Bilimleri"}],
                "AYT": [{id: 5, name: "Matematik"}, {id: 6, name: "Fizik"}, {id: 7, name: "Kimya"}, {id: 8, name: "Biyoloji"}, {id: 9, name: "Edebiyat-Sosyal Bilimler 1"}]
            };

            examTypeSelect.addEventListener('change', function() {
                const selectedType = this.value;
                subjectSelect.innerHTML = '<option value="">Ders Seçin</option>';
                if (selectedType && examSubjects[selectedType]) {
                    examSubjects[selectedType].forEach(subject => {
                        subjectSelect.innerHTML += `<option value="${subject.id}">${subject.name}</option>`;
                    });
                    subjectSelect.disabled = false;
                } else {
                    subjectSelect.disabled = true;
                }
                startExamBtn.disabled = true;
            });

            subjectSelect.addEventListener('change', function() {
                startExamBtn.disabled = !this.value;
            });

            startExamBtn.addEventListener('click', function() {
                const topicId = subjectSelect.value;
                // Backend'den soruları çekme (mevcut yapınızla benzer)
                // fetch(`/User/GetFilteredQuestions?topicId=${topicId}`)...
                // Şimdilik örnek verilerle devam edelim:
                loadAndStartExam(topicId);
            });

            function loadAndStartExam(topicId) {
                 // Gerçek uygulamada burası fetch ile dolacak
                 fetch(`/User/GetFilteredQuestions?topicId=${topicId}`)
                    .then(response => response.json())
                    .then(data => {
                        if (data.success && data.questions.length > 0) {
                            questions = data.questions;

                            // Sınavı başlat
                            examSelectionContainer.style.display = 'none';
                            examArea.style.display = 'flex';

                            initializeExam();
                        } else {
                            alert('Seçilen derse ait soru bulunamadı.');
                        }
                    })
                    .catch(err => {
                        alert('Sınav yüklenirken bir hata oluştu.');
                        console.error(err);
                    });
            }

            function initializeExam() {
                currentQuestionIndex = 0;
                userAnswers = questions.map(q => ({
                    questionId: q.id,
                    selectedOptionId: null,
                    isCorrect: null, // Sonuçta hesaplanacak
                    isFlagged: false,
                    status: 'unseen'
                }));

                // Header'ı güncelle
                const examTypeText = examTypeSelect.options[examTypeSelect.selectedIndex].text;
                const subjectText = subjectSelect.options[subjectSelect.selectedIndex].text;
                document.getElementById('examTitle').textContent = `${examTypeText} - ${subjectText}`;

                // Optik formu oluştur
                buildAnswerSheet();

                // İlk soruyu göster
                displayQuestion(currentQuestionIndex);

                // Timer'ı başlat (soru başına 1.5 dakika)
                const totalTimeInSeconds = questions.length * 90;
                startTimer(totalTimeInSeconds);
            }

            // --- EXAM UI LOGIC ---

            function displayQuestion(index) {
                const question = questions[index];
                const answer = userAnswers[index];

                // Soru metnini ve numarasını güncelle
                document.getElementById('questionTitle').textContent = `Soru ${index + 1}`;
                document.getElementById('questionText').textContent = question.questionText;
                document.getElementById('currentQuestionNumber').textContent = index + 1;
                document.getElementById('totalQuestions').textContent = questions.length;

                // Seçenekleri oluştur
                const optionsContainer = document.getElementById('optionsContainer');
                optionsContainer.innerHTML = '';
                question.options.forEach(option => {
                    const optionBtn = document.createElement('button');
                    optionBtn.className = 'option-btn';
                    optionBtn.dataset.optionId = option.id;
                    optionBtn.innerHTML = `<span class="option-label">${option.label}</span><span class="option-text">${option.text}</span>`;
                    if (answer.selectedOptionId === option.id) {
                        optionBtn.classList.add('selected');
                    }
                    optionBtn.addEventListener('click', () => selectOption(option.id, option.isCorrect));
                    optionsContainer.appendChild(optionBtn);
                });

                // Navigasyon ve diğer butonların durumunu güncelle
                updateButtonsState();
                updateAnswerSheetUI();
            }

            function selectOption(optionId, isCorrect) {
                // Mevcut seçimi kaldır
                document.querySelectorAll('.option-btn.selected').forEach(btn => btn.classList.remove('selected'));
                // Yeni seçimi ekle
                document.querySelector(`.option-btn[data-option-id='${optionId}']`).classList.add('selected');

                // Cevabı kaydet
                userAnswers[currentQuestionIndex].selectedOptionId = optionId;
                userAnswers[currentQuestionIndex].isCorrect = isCorrect;
                userAnswers[currentQuestionIndex].status = 'answered';

                updateAnswerSheetUI();
            }

            function clearAnswer() {
                 userAnswers[currentQuestionIndex].selectedOptionId = null;
                 userAnswers[currentQuestionIndex].isCorrect = null;
                 userAnswers[currentQuestionIndex].status = 'skipped'; // veya 'unseen'
                 displayQuestion(currentQuestionIndex); // UI'ı yenile
            }

            function toggleFlag() {
                const flagBtn = document.getElementById('flagQuestionBtn');
                const answer = userAnswers[currentQuestionIndex];
                answer.isFlagged = !answer.isFlagged;

                flagBtn.classList.toggle('flagged', answer.isFlagged);
                flagBtn.innerHTML = answer.isFlagged
                    ? '<i class="fas fa-flag"></i> <span>İşareti Kaldır</span>'
                    : '<i class="far fa-flag"></i> <span>Soruyu İşaretle</span>';

                updateAnswerSheetUI();
            }

            function updateButtonsState() {
                // Navigasyon
                document.getElementById('prevQuestionBtn').disabled = currentQuestionIndex === 0;
                const nextBtn = document.getElementById('nextQuestionBtn');
                if (currentQuestionIndex === questions.length - 1) {
                     nextBtn.innerHTML = 'Testi Bitir <i class="fas fa-flag-checkered"></i>';
                } else {
                     nextBtn.innerHTML = 'Sonraki <i class="fas fa-chevron-right"></i>';
                }

                // Flag butonu
                const flagBtn = document.getElementById('flagQuestionBtn');
                const isFlagged = userAnswers[currentQuestionIndex].isFlagged;
                flagBtn.classList.toggle('flagged', isFlagged);
                 flagBtn.innerHTML = isFlagged
                    ? '<i class="fas fa-flag"></i> <span>İşareti Kaldır</span>'
                    : '<i class="far fa-flag"></i> <span>Soruyu İşaretle</span>';

                // Cevabı temizle butonu
                document.getElementById('clearAnswerBtn').disabled = userAnswers[currentQuestionIndex].selectedOptionId === null;
            }

            function buildAnswerSheet() {
                const grid = document.getElementById('answerGrid');
                grid.innerHTML = '';
                for (let i = 0; i < questions.length; i++) {
                    const item = document.createElement('div');
                    item.className = 'answer-grid-item';
                    item.textContent = i + 1;
                    item.dataset.index = i;
                    item.addEventListener('click', () => jumpToQuestion(i));
                    grid.appendChild(item);
                }
            }

            function updateAnswerSheetUI() {
                const items = document.querySelectorAll('.answer-grid-item');
                items.forEach((item, index) => {
                    const answer = userAnswers[index];
                    item.classList.remove('current', 'answered', 'skipped', 'flagged');

                    // Durum
                    if (answer.status === 'answered') item.classList.add('answered');
                    else if (answer.status === 'skipped') item.classList.add('skipped');

                    // Mevcut soru
                    if (index === currentQuestionIndex) item.classList.add('current');

                    // İşaret
                    const existingFlag = item.querySelector('.flag-indicator');
                    if (existingFlag) existingFlag.remove();
                    if(answer.isFlagged) {
                        const flagIcon = document.createElement('i');
                        flagIcon.className = 'fas fa-flag flag-indicator';
                        item.appendChild(flagIcon);
                    }
                });
            }

            function jumpToQuestion(index) {
                // Geçerli sorunun durumunu ayarla (eğer cevaplanmadıysa)
                if (userAnswers[currentQuestionIndex].status === 'unseen') {
                    userAnswers[currentQuestionIndex].status = 'skipped';
                }
                currentQuestionIndex = index;
                displayQuestion(currentQuestionIndex);
            }

            function changeQuestion(direction) {
                // Geçerli sorunun durumunu ayarla
                 if (userAnswers[currentQuestionIndex].status === 'unseen') {
                    userAnswers[currentQuestionIndex].status = 'skipped';
                }

                const newIndex = currentQuestionIndex + direction;
                if (newIndex >= 0 && newIndex < questions.length) {
                    currentQuestionIndex = newIndex;
                    displayQuestion(currentQuestionIndex);
                } else if (newIndex === questions.length) {
                    finishExam(); // Son sorudan sonra "Testi Bitir"
                }
            }

            // --- EVENT LISTENERS ---
            document.getElementById('nextQuestionBtn').addEventListener('click', () => changeQuestion(1));
            document.getElementById('prevQuestionBtn').addEventListener('click', () => changeQuestion(-1));
            document.getElementById('flagQuestionBtn').addEventListener('click', toggleFlag);
            document.getElementById('clearAnswerBtn').addEventListener('click', clearAnswer);
            document.getElementById('finishExamBtn').addEventListener('click', () => {
                 if (confirm('Testi bitirmek istediğinizden emin misiniz?')) {
                    finishExam();
                }
            });

            // --- TIMER ---
            function startTimer(duration) {
                let timer = duration;
                const timerEl = document.getElementById('timer');
                timerInterval = setInterval(() => {
                    let hours = Math.floor(timer / 3600);
                    let minutes = Math.floor((timer % 3600) / 60);
                    let seconds = timer % 60;

                    hours = hours < 10 ? "0" + hours : hours;
                    minutes = minutes < 10 ? "0" + minutes : minutes;
                    seconds = seconds < 10 ? "0" + seconds : seconds;

                    timerEl.textContent = `${hours}:${minutes}:${seconds}`;

                    if (--timer < 0) {
                        clearInterval(timerInterval);
                        alert("Süre doldu!");
                        finishExam();
                    }
                }, 1000);
            }

            // --- RESULTS ---
            function finishExam() {
                clearInterval(timerInterval);
                examArea.style.display = 'none';
                resultsContainer.style.display = 'block';

                let correct = 0;
                let incorrect = 0;
                let blank = 0;

                userAnswers.forEach(answer => {
                    if (answer.selectedOptionId === null) {
                        blank++;
                    } else if (answer.isCorrect) {
                        correct++;
                    } else {
                        incorrect++;
                    }
                });

                const net = correct - (incorrect / 4);

                document.querySelector('#resultsCorrect .stat-value').textContent = correct;
                document.querySelector('#resultsIncorrect .stat-value').textContent = incorrect;
                document.querySelector('#resultsBlank .stat-value').textContent = blank;
                document.querySelector('#resultsNet .stat-value').textContent = net.toFixed(2);

                // Veriyi sunucuya göndermek için hazırla
                const dataToSubmit = userAnswers.map(a => ({
                    questionId: a.questionId,
                    selectedOptionId: a.selectedOptionId,
                    isCorrect: a.isCorrect === true, // null ise false olsun
                    isAnswered: a.selectedOptionId !== null,
                    timeSpent: 0 // Geliştirilebilir
                }));
                document.getElementById('userAnswersData').value = JSON.stringify(dataToSubmit);
            }

            document.getElementById('saveResults').addEventListener('click', function() {
                // Formu submit etme mantığı, eski kodunuzdaki gibi kalabilir
                document.getElementById('submitResultsForm').submit();
                alert("Sonuçlar kaydediliyor...");
            });
        });
    </script>
</body>
</html>