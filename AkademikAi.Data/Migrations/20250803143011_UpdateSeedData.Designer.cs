// <auto-generated />
using System;
using AkademikAi.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AkademikAi.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250803143011_UpdateSeedData")]
    partial class UpdateSeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AkademikAi.Entity.Entites.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("UserRole")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("AkademikAi.Entity.Entites.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("UserRole")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("AkademikAi.Entity.Entites.Questions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("DifficultyLevel")
                        .HasColumnType("integer");

                    b.Property<Guid?>("GeneratedForUserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SolutionText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("GeneratedForUserId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-1111-1111-1111-111111111111"),
                            DifficultyLevel = 0,
                            IsActive = true,
                            QuestionText = "2x + 5 = 13 denklemini çözünüz.",
                            SolutionText = "2x + 5 = 13\n2x = 13 - 5\n2x = 8\nx = 4",
                            Source = "Matematik Kitabı"
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-2222-2222-2222-222222222222"),
                            DifficultyLevel = 0,
                            IsActive = true,
                            QuestionText = "Bir üçgenin iç açıları toplamı kaç derecedir?",
                            SolutionText = "Bir üçgenin iç açıları toplamı 180 derecedir.",
                            Source = "Geometri Kitabı"
                        },
                        new
                        {
                            Id = new Guid("cccccccc-3333-3333-3333-333333333333"),
                            DifficultyLevel = 1,
                            IsActive = true,
                            QuestionText = "x² - 4x + 4 = 0 denkleminin çözümü nedir?",
                            SolutionText = "x² - 4x + 4 = 0\n(x - 2)² = 0\nx = 2",
                            Source = "Matematik Kitabı"
                        },
                        new
                        {
                            Id = new Guid("dddddddd-4444-4444-4444-444444444444"),
                            DifficultyLevel = 1,
                            IsActive = true,
                            QuestionText = "Bir dairenin alanı πr² formülü ile hesaplanır. Yarıçapı 5 cm olan dairenin alanı kaç cm²'dir?",
                            SolutionText = "A = πr²\nA = π × 5²\nA = 25π cm²",
                            Source = "Geometri Kitabı"
                        },
                        new
                        {
                            Id = new Guid("eeeeeeee-5555-5555-5555-555555555555"),
                            DifficultyLevel = 0,
                            IsActive = true,
                            QuestionText = "sin(30°) değeri kaçtır?",
                            SolutionText = "sin(30°) = 1/2 = 0.5",
                            Source = "Trigonometri Kitabı"
                        },
                        new
                        {
                            Id = new Guid("ffffffff-6666-6666-6666-666666666666"),
                            DifficultyLevel = 0,
                            IsActive = true,
                            QuestionText = "Newton'un birinci yasası nedir?",
                            SolutionText = "Bir cisme etki eden net kuvvet sıfır ise, cisim durumunu korur (durgun kalır veya sabit hızla hareket eder).",
                            Source = "Fizik Kitabı"
                        },
                        new
                        {
                            Id = new Guid("11111111-7777-7777-7777-777777777777"),
                            DifficultyLevel = 1,
                            IsActive = true,
                            QuestionText = "F = ma formülünde F, m ve a neyi temsil eder?",
                            SolutionText = "F: Kuvvet (Newton), m: Kütle (kg), a: İvme (m/s²)",
                            Source = "Fizik Kitabı"
                        },
                        new
                        {
                            Id = new Guid("22222222-8888-8888-8888-888888888888"),
                            DifficultyLevel = 1,
                            IsActive = true,
                            QuestionText = "Bir cismin kinetik enerjisi hangi formülle hesaplanır?",
                            SolutionText = "Kinetik enerji = 1/2 × m × v²",
                            Source = "Fizik Kitabı"
                        },
                        new
                        {
                            Id = new Guid("33333333-9999-9999-9999-999999999999"),
                            DifficultyLevel = 0,
                            IsActive = true,
                            QuestionText = "Suyun kimyasal formülü nedir?",
                            SolutionText = "H₂O",
                            Source = "Kimya Kitabı"
                        },
                        new
                        {
                            Id = new Guid("44444444-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            DifficultyLevel = 0,
                            IsActive = true,
                            QuestionText = "pH değeri 7'den küçük olan çözeltiler nasıl adlandırılır?",
                            SolutionText = "Asidik çözeltiler",
                            Source = "Kimya Kitabı"
                        });
                });

            modelBuilder.Entity("AkademikAi.Entity.Entites.QuestionsOptions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean");

                    b.Property<char>("Label")
                        .HasMaxLength(1)
                        .HasColumnType("character(1)");

                    b.Property<int>("OptionOrder")
                        .HasColumnType("integer");

                    b.Property<string>("OptionText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionsOptions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            IsCorrect = false,
                            Label = 'A',
                            OptionOrder = 1,
                            OptionText = "3",
                            QuestionId = new Guid("aaaaaaaa-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            IsCorrect = true,
                            Label = 'B',
                            OptionOrder = 2,
                            OptionText = "4",
                            QuestionId = new Guid("aaaaaaaa-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-cccc-cccc-cccc-cccccccccccc"),
                            IsCorrect = false,
                            Label = 'C',
                            OptionOrder = 3,
                            OptionText = "5",
                            QuestionId = new Guid("aaaaaaaa-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-dddd-dddd-dddd-dddddddddddd"),
                            IsCorrect = false,
                            Label = 'D',
                            OptionOrder = 4,
                            OptionText = "6",
                            QuestionId = new Guid("aaaaaaaa-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            IsCorrect = false,
                            Label = 'A',
                            OptionOrder = 1,
                            OptionText = "90",
                            QuestionId = new Guid("bbbbbbbb-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            IsCorrect = true,
                            Label = 'B',
                            OptionOrder = 2,
                            OptionText = "180",
                            QuestionId = new Guid("bbbbbbbb-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-cccc-cccc-cccc-cccccccccccc"),
                            IsCorrect = false,
                            Label = 'C',
                            OptionOrder = 3,
                            OptionText = "270",
                            QuestionId = new Guid("bbbbbbbb-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-dddd-dddd-dddd-dddddddddddd"),
                            IsCorrect = false,
                            Label = 'D',
                            OptionOrder = 4,
                            OptionText = "360",
                            QuestionId = new Guid("bbbbbbbb-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            Id = new Guid("cccccccc-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            IsCorrect = false,
                            Label = 'A',
                            OptionOrder = 1,
                            OptionText = "1",
                            QuestionId = new Guid("cccccccc-3333-3333-3333-333333333333")
                        },
                        new
                        {
                            Id = new Guid("cccccccc-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            IsCorrect = true,
                            Label = 'B',
                            OptionOrder = 2,
                            OptionText = "2",
                            QuestionId = new Guid("cccccccc-3333-3333-3333-333333333333")
                        },
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            IsCorrect = false,
                            Label = 'C',
                            OptionOrder = 3,
                            OptionText = "3",
                            QuestionId = new Guid("cccccccc-3333-3333-3333-333333333333")
                        },
                        new
                        {
                            Id = new Guid("cccccccc-dddd-dddd-dddd-dddddddddddd"),
                            IsCorrect = false,
                            Label = 'D',
                            OptionOrder = 4,
                            OptionText = "4",
                            QuestionId = new Guid("cccccccc-3333-3333-3333-333333333333")
                        },
                        new
                        {
                            Id = new Guid("dddddddd-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            IsCorrect = false,
                            Label = 'A',
                            OptionOrder = 1,
                            OptionText = "20π",
                            QuestionId = new Guid("dddddddd-4444-4444-4444-444444444444")
                        },
                        new
                        {
                            Id = new Guid("dddddddd-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            IsCorrect = true,
                            Label = 'B',
                            OptionOrder = 2,
                            OptionText = "25π",
                            QuestionId = new Guid("dddddddd-4444-4444-4444-444444444444")
                        },
                        new
                        {
                            Id = new Guid("dddddddd-cccc-cccc-cccc-cccccccccccc"),
                            IsCorrect = false,
                            Label = 'C',
                            OptionOrder = 3,
                            OptionText = "30π",
                            QuestionId = new Guid("dddddddd-4444-4444-4444-444444444444")
                        },
                        new
                        {
                            Id = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            IsCorrect = false,
                            Label = 'D',
                            OptionOrder = 4,
                            OptionText = "35π",
                            QuestionId = new Guid("dddddddd-4444-4444-4444-444444444444")
                        },
                        new
                        {
                            Id = new Guid("eeeeeeee-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            IsCorrect = false,
                            Label = 'A',
                            OptionOrder = 1,
                            OptionText = "0.25",
                            QuestionId = new Guid("eeeeeeee-5555-5555-5555-555555555555")
                        },
                        new
                        {
                            Id = new Guid("eeeeeeee-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            IsCorrect = true,
                            Label = 'B',
                            OptionOrder = 2,
                            OptionText = "0.5",
                            QuestionId = new Guid("eeeeeeee-5555-5555-5555-555555555555")
                        },
                        new
                        {
                            Id = new Guid("eeeeeeee-cccc-cccc-cccc-cccccccccccc"),
                            IsCorrect = false,
                            Label = 'C',
                            OptionOrder = 3,
                            OptionText = "0.75",
                            QuestionId = new Guid("eeeeeeee-5555-5555-5555-555555555555")
                        },
                        new
                        {
                            Id = new Guid("eeeeeeee-dddd-dddd-dddd-dddddddddddd"),
                            IsCorrect = false,
                            Label = 'D',
                            OptionOrder = 4,
                            OptionText = "1",
                            QuestionId = new Guid("eeeeeeee-5555-5555-5555-555555555555")
                        },
                        new
                        {
                            Id = new Guid("ffffffff-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            IsCorrect = true,
                            Label = 'A',
                            OptionOrder = 1,
                            OptionText = "Eylemsizlik yasası",
                            QuestionId = new Guid("ffffffff-6666-6666-6666-666666666666")
                        },
                        new
                        {
                            Id = new Guid("ffffffff-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            IsCorrect = false,
                            Label = 'B',
                            OptionOrder = 2,
                            OptionText = "Dinamik yasası",
                            QuestionId = new Guid("ffffffff-6666-6666-6666-666666666666")
                        },
                        new
                        {
                            Id = new Guid("ffffffff-cccc-cccc-cccc-cccccccccccc"),
                            IsCorrect = false,
                            Label = 'C',
                            OptionOrder = 3,
                            OptionText = "Statik yasası",
                            QuestionId = new Guid("ffffffff-6666-6666-6666-666666666666")
                        },
                        new
                        {
                            Id = new Guid("ffffffff-dddd-dddd-dddd-dddddddddddd"),
                            IsCorrect = false,
                            Label = 'D',
                            OptionOrder = 4,
                            OptionText = "Kinetik yasası",
                            QuestionId = new Guid("ffffffff-6666-6666-6666-666666666666")
                        },
                        new
                        {
                            Id = new Guid("11111111-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            IsCorrect = false,
                            Label = 'A',
                            OptionOrder = 1,
                            OptionText = "Kuvvet = Kütle × Hız",
                            QuestionId = new Guid("11111111-7777-7777-7777-777777777777")
                        },
                        new
                        {
                            Id = new Guid("11111111-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            IsCorrect = true,
                            Label = 'B',
                            OptionOrder = 2,
                            OptionText = "Kuvvet = Kütle × İvme",
                            QuestionId = new Guid("11111111-7777-7777-7777-777777777777")
                        },
                        new
                        {
                            Id = new Guid("11111111-cccc-cccc-cccc-cccccccccccc"),
                            IsCorrect = false,
                            Label = 'C',
                            OptionOrder = 3,
                            OptionText = "Kuvvet = Kütle × Zaman",
                            QuestionId = new Guid("11111111-7777-7777-7777-777777777777")
                        },
                        new
                        {
                            Id = new Guid("11111111-dddd-dddd-dddd-dddddddddddd"),
                            IsCorrect = false,
                            Label = 'D',
                            OptionOrder = 4,
                            OptionText = "Kuvvet = Kütle × Mesafe",
                            QuestionId = new Guid("11111111-7777-7777-7777-777777777777")
                        },
                        new
                        {
                            Id = new Guid("22222222-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            IsCorrect = false,
                            Label = 'A',
                            OptionOrder = 1,
                            OptionText = "m × v",
                            QuestionId = new Guid("22222222-8888-8888-8888-888888888888")
                        },
                        new
                        {
                            Id = new Guid("22222222-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            IsCorrect = true,
                            Label = 'B',
                            OptionOrder = 2,
                            OptionText = "1/2 × m × v²",
                            QuestionId = new Guid("22222222-8888-8888-8888-888888888888")
                        },
                        new
                        {
                            Id = new Guid("22222222-cccc-cccc-cccc-cccccccccccc"),
                            IsCorrect = false,
                            Label = 'C',
                            OptionOrder = 3,
                            OptionText = "m × v²",
                            QuestionId = new Guid("22222222-8888-8888-8888-888888888888")
                        },
                        new
                        {
                            Id = new Guid("22222222-dddd-dddd-dddd-dddddddddddd"),
                            IsCorrect = false,
                            Label = 'D',
                            OptionOrder = 4,
                            OptionText = "2 × m × v",
                            QuestionId = new Guid("22222222-8888-8888-8888-888888888888")
                        },
                        new
                        {
                            Id = new Guid("33333333-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            IsCorrect = false,
                            Label = 'A',
                            OptionOrder = 1,
                            OptionText = "CO₂",
                            QuestionId = new Guid("33333333-9999-9999-9999-999999999999")
                        },
                        new
                        {
                            Id = new Guid("33333333-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            IsCorrect = true,
                            Label = 'B',
                            OptionOrder = 2,
                            OptionText = "H₂O",
                            QuestionId = new Guid("33333333-9999-9999-9999-999999999999")
                        },
                        new
                        {
                            Id = new Guid("33333333-cccc-cccc-cccc-cccccccccccc"),
                            IsCorrect = false,
                            Label = 'C',
                            OptionOrder = 3,
                            OptionText = "O₂",
                            QuestionId = new Guid("33333333-9999-9999-9999-999999999999")
                        },
                        new
                        {
                            Id = new Guid("33333333-dddd-dddd-dddd-dddddddddddd"),
                            IsCorrect = false,
                            Label = 'D',
                            OptionOrder = 4,
                            OptionText = "N₂",
                            QuestionId = new Guid("33333333-9999-9999-9999-999999999999")
                        },
                        new
                        {
                            Id = new Guid("44444444-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            IsCorrect = false,
                            Label = 'A',
                            OptionOrder = 1,
                            OptionText = "Bazik",
                            QuestionId = new Guid("44444444-aaaa-aaaa-aaaa-aaaaaaaaaaaa")
                        },
                        new
                        {
                            Id = new Guid("44444444-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            IsCorrect = true,
                            Label = 'B',
                            OptionOrder = 2,
                            OptionText = "Asidik",
                            QuestionId = new Guid("44444444-aaaa-aaaa-aaaa-aaaaaaaaaaaa")
                        },
                        new
                        {
                            Id = new Guid("44444444-cccc-cccc-cccc-cccccccccccc"),
                            IsCorrect = false,
                            Label = 'C',
                            OptionOrder = 3,
                            OptionText = "Nötr",
                            QuestionId = new Guid("44444444-aaaa-aaaa-aaaa-aaaaaaaaaaaa")
                        },
                        new
                        {
                            Id = new Guid("44444444-dddd-dddd-dddd-dddddddddddd"),
                            IsCorrect = false,
                            Label = 'D',
                            OptionOrder = 4,
                            OptionText = "Amfoter",
                            QuestionId = new Guid("44444444-aaaa-aaaa-aaaa-aaaaaaaaaaaa")
                        });
                });

            modelBuilder.Entity("AkademikAi.Entity.Entites.QuestionsTopic", b =>
                {
                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TopicId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.HasKey("QuestionId", "TopicId");

                    b.HasIndex("TopicId");

                    b.ToTable("QuestionsTopics");

                    b.HasData(
                        new
                        {
                            QuestionId = new Guid("aaaaaaaa-1111-1111-1111-111111111111"),
                            TopicId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Id = new Guid("aaaaaaaa-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            QuestionId = new Guid("bbbbbbbb-2222-2222-2222-222222222222"),
                            TopicId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Id = new Guid("aaaaaaaa-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            QuestionId = new Guid("cccccccc-3333-3333-3333-333333333333"),
                            TopicId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Id = new Guid("aaaaaaaa-3333-3333-3333-333333333333")
                        },
                        new
                        {
                            QuestionId = new Guid("dddddddd-4444-4444-4444-444444444444"),
                            TopicId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Id = new Guid("aaaaaaaa-4444-4444-4444-444444444444")
                        },
                        new
                        {
                            QuestionId = new Guid("eeeeeeee-5555-5555-5555-555555555555"),
                            TopicId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Id = new Guid("aaaaaaaa-5555-5555-5555-555555555555")
                        },
                        new
                        {
                            QuestionId = new Guid("aaaaaaaa-1111-1111-1111-111111111111"),
                            TopicId = new Guid("11111111-1111-1111-1111-111111111111"),
                            Id = new Guid("bbbbbbbb-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            QuestionId = new Guid("cccccccc-3333-3333-3333-333333333333"),
                            TopicId = new Guid("11111111-1111-1111-1111-111111111111"),
                            Id = new Guid("bbbbbbbb-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            QuestionId = new Guid("bbbbbbbb-2222-2222-2222-222222222222"),
                            TopicId = new Guid("22222222-2222-2222-2222-222222222222"),
                            Id = new Guid("bbbbbbbb-3333-3333-3333-333333333333")
                        },
                        new
                        {
                            QuestionId = new Guid("dddddddd-4444-4444-4444-444444444444"),
                            TopicId = new Guid("22222222-2222-2222-2222-222222222222"),
                            Id = new Guid("bbbbbbbb-4444-4444-4444-444444444444")
                        },
                        new
                        {
                            QuestionId = new Guid("eeeeeeee-5555-5555-5555-555555555555"),
                            TopicId = new Guid("33333333-3333-3333-3333-333333333333"),
                            Id = new Guid("bbbbbbbb-5555-5555-5555-555555555555")
                        },
                        new
                        {
                            QuestionId = new Guid("ffffffff-6666-6666-6666-666666666666"),
                            TopicId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            Id = new Guid("cccccccc-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            QuestionId = new Guid("11111111-7777-7777-7777-777777777777"),
                            TopicId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            Id = new Guid("cccccccc-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            QuestionId = new Guid("22222222-8888-8888-8888-888888888888"),
                            TopicId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            Id = new Guid("cccccccc-3333-3333-3333-333333333333")
                        },
                        new
                        {
                            QuestionId = new Guid("ffffffff-6666-6666-6666-666666666666"),
                            TopicId = new Guid("44444444-4444-4444-4444-444444444444"),
                            Id = new Guid("dddddddd-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            QuestionId = new Guid("11111111-7777-7777-7777-777777777777"),
                            TopicId = new Guid("44444444-4444-4444-4444-444444444444"),
                            Id = new Guid("dddddddd-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            QuestionId = new Guid("22222222-8888-8888-8888-888888888888"),
                            TopicId = new Guid("55555555-5555-5555-5555-555555555555"),
                            Id = new Guid("dddddddd-3333-3333-3333-333333333333")
                        },
                        new
                        {
                            QuestionId = new Guid("33333333-9999-9999-9999-999999999999"),
                            TopicId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            Id = new Guid("eeeeeeee-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            QuestionId = new Guid("44444444-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            TopicId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            Id = new Guid("eeeeeeee-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            QuestionId = new Guid("33333333-9999-9999-9999-999999999999"),
                            TopicId = new Guid("66666666-6666-6666-6666-666666666666"),
                            Id = new Guid("eeeeeeee-3333-3333-3333-333333333333")
                        },
                        new
                        {
                            QuestionId = new Guid("44444444-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            TopicId = new Guid("77777777-7777-7777-7777-777777777777"),
                            Id = new Guid("eeeeeeee-4444-4444-4444-444444444444")
                        });
                });

            modelBuilder.Entity("AkademikAi.Entity.Entites.Topics", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ParentTopicId")
                        .HasColumnType("uuid");

                    b.Property<string>("TopicName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("ParentTopicId");

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            TopicName = "Matematik"
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            TopicName = "Fizik"
                        },
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            TopicName = "Kimya"
                        },
                        new
                        {
                            Id = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            TopicName = "Biyoloji"
                        },
                        new
                        {
                            Id = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            TopicName = "Türkçe"
                        },
                        new
                        {
                            Id = new Guid("ffffffff-ffff-ffff-ffff-ffffffffffff"),
                            TopicName = "Tarih"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            ParentTopicId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            TopicName = "Cebir"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            ParentTopicId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            TopicName = "Geometri"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            ParentTopicId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            TopicName = "Trigonometri"
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            ParentTopicId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            TopicName = "Mekanik"
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            ParentTopicId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            TopicName = "Elektrik"
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666666"),
                            ParentTopicId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            TopicName = "Organik Kimya"
                        },
                        new
                        {
                            Id = new Guid("77777777-7777-7777-7777-777777777777"),
                            ParentTopicId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            TopicName = "İnorganik Kimya"
                        });
                });

            modelBuilder.Entity("AkademikAi.Entity.Entites.UserAnswers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AnsweredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SelectedOptionId")
                        .HasColumnType("uuid");

                    b.Property<char>("UserAnswer")
                        .HasColumnType("character(1)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAnswers");
                });

            modelBuilder.Entity("AkademikAi.Entity.Entites.UserNotifications", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserNotifications");
                });

            modelBuilder.Entity("AkademikAi.Entity.Entites.UserPerformanceSummaries", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CorrectAnswers")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("SuccessRate")
                        .HasColumnType("double precision");

                    b.Property<Guid>("TopicId")
                        .HasColumnType("uuid");

                    b.Property<int>("TotalAnsweredQuestions")
                        .HasColumnType("integer");

                    b.Property<int>("TotalQuestionsAnswered")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.HasIndex("UserId", "TopicId")
                        .IsUnique();

                    b.ToTable("UserPerformanceSummaries");
                });

            modelBuilder.Entity("AkademikAi.Entity.Entites.UserRecommendation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AppliedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsApplied")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RecommendationText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RecommendationType")
                        .HasColumnType("integer");

                    b.Property<Guid>("RelatedTopicId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RelatedTopicId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRecommendations");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AkademikAi.Entity.Entites.Questions", b =>
                {
                    b.HasOne("AkademikAi.Entity.Entites.AppUser", "GeneratedForUser")
                        .WithMany()
                        .HasForeignKey("GeneratedForUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("GeneratedForUser");
                });

            modelBuilder.Entity("AkademikAi.Entity.Entites.QuestionsOptions", b =>
                {
                    b.HasOne("AkademikAi.Entity.Entites.Questions", "Question")
                        .WithMany("QuestionsOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("AkademikAi.Entity.Entites.QuestionsTopic", b =>
                {
                    b.HasOne("AkademikAi.Entity.Entites.Questions", "Question")
                        .WithMany("QuestionsTopics")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AkademikAi.Entity.Entites.Topics", "Topic")
                        .WithMany("QuestionsTopics")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("AkademikAi.Entity.Entites.Topics", b =>
                {
                    b.HasOne("AkademikAi.Entity.Entites.Topics", null)
                        .WithMany()
                        .HasForeignKey("ParentTopicId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AkademikAi.Entity.Entites.UserAnswers", b =>
                {
                    b.HasOne("AkademikAi.Entity.Entites.Questions", "Question")
                        .WithMany("UserAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AkademikAi.Entity.Entites.AppUser", "User")
                        .WithMany("UserAnswers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AkademikAi.Entity.Entites.UserNotifications", b =>
                {
                    b.HasOne("AkademikAi.Entity.Entites.AppUser", "User")
                        .WithMany("UserNotifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AkademikAi.Entity.Entites.UserPerformanceSummaries", b =>
                {
                    b.HasOne("AkademikAi.Entity.Entites.Topics", "Topic")
                        .WithMany()
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AkademikAi.Entity.Entites.AppUser", "User")
                        .WithMany("UserPerformanceSummaries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Topic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AkademikAi.Entity.Entites.UserRecommendation", b =>
                {
                    b.HasOne("AkademikAi.Entity.Entites.Topics", "Topic")
                        .WithMany()
                        .HasForeignKey("RelatedTopicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AkademikAi.Entity.Entites.AppUser", "User")
                        .WithMany("UserRecommendations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Topic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("AkademikAi.Entity.Entites.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("AkademikAi.Entity.Entites.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("AkademikAi.Entity.Entites.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("AkademikAi.Entity.Entites.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AkademikAi.Entity.Entites.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("AkademikAi.Entity.Entites.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AkademikAi.Entity.Entites.AppUser", b =>
                {
                    b.Navigation("UserAnswers");

                    b.Navigation("UserNotifications");

                    b.Navigation("UserPerformanceSummaries");

                    b.Navigation("UserRecommendations");
                });

            modelBuilder.Entity("AkademikAi.Entity.Entites.Questions", b =>
                {
                    b.Navigation("QuestionsOptions");

                    b.Navigation("QuestionsTopics");

                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("AkademikAi.Entity.Entites.Topics", b =>
                {
                    b.Navigation("QuestionsTopics");
                });
#pragma warning restore 612, 618
        }
    }
}
