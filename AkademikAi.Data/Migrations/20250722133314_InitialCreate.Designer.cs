// <auto-generated />
using System;
using AkademikAi.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AkademikAi.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250722133314_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AkademikAi.Entity.Entites.Questions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DifficultyLevel")
                        .HasColumnType("int");

                    b.Property<Guid>("GeneratedForUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GeneratedForUserId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SolutionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("GeneratedForUserId");

                    b.HasIndex("GeneratedForUserId1");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("AkademikAi.Entity.Entites.QuestionsOptions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("OptionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionsOptions");
                });

            modelBuilder.Entity("AkademikAi.Entity.Entites.QuestionsTopic", b =>
                {
                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TopicId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("QuestionId", "TopicId");

                    b.HasIndex("TopicId");

                    b.ToTable("QuestionsTopics");
                });

            modelBuilder.Entity("AkademikAi.Entity.Entites.Topics", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParentTopicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TopicName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ParentTopicId");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("AkademikAi.Entity.Entites.UserAnswers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AnsweredAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAnswers");
                });

            modelBuilder.Entity("AkademikAi.Entity.Entites.UserNotifications", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserNotifications");
                });

            modelBuilder.Entity("AkademikAi.Entity.Entites.UserPerformanceSummaries", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CorrectAnswers")
                        .HasColumnType("int");

                    b.Property<Guid>("TopicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TotalAnsweredQuestions")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.HasIndex("UserId", "TopicId")
                        .IsUnique();

                    b.ToTable("UserPerformanceSummaries");
                });

            modelBuilder.Entity("AkademikAi.Entity.Entites.UserRecommendation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("RecommendationType")
                        .HasColumnType("int");

                    b.Property<Guid>("RelatedTopicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RelatedTopicId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRecommendations");
                });

            modelBuilder.Entity("AkademikAi.Entity.Entites.Users", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AkademikAi.Entity.Entites.Questions", b =>
                {
                    b.HasOne("AkademikAi.Entity.Entites.Users", null)
                        .WithMany()
                        .HasForeignKey("GeneratedForUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AkademikAi.Entity.Entites.Users", "GeneratedForUser")
                        .WithMany()
                        .HasForeignKey("GeneratedForUserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GeneratedForUser");
                });

            modelBuilder.Entity("AkademikAi.Entity.Entites.QuestionsOptions", b =>
                {
                    b.HasOne("AkademikAi.Entity.Entites.Questions", "Question")
                        .WithMany("QuestionsOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("AkademikAi.Entity.Entites.QuestionsTopic", b =>
                {
                    b.HasOne("AkademikAi.Entity.Entites.Questions", "Question")
                        .WithMany("QuestionsTopics")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AkademikAi.Entity.Entites.Topics", "Topic")
                        .WithMany("QuestionsTopics")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("AkademikAi.Entity.Entites.Topics", b =>
                {
                    b.HasOne("AkademikAi.Entity.Entites.Topics", null)
                        .WithMany()
                        .HasForeignKey("ParentTopicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("AkademikAi.Entity.Entites.UserAnswers", b =>
                {
                    b.HasOne("AkademikAi.Entity.Entites.Questions", "Question")
                        .WithMany("UserAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AkademikAi.Entity.Entites.Users", "User")
                        .WithMany("UserAnswers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AkademikAi.Entity.Entites.UserNotifications", b =>
                {
                    b.HasOne("AkademikAi.Entity.Entites.Users", "User")
                        .WithMany("UserNotifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AkademikAi.Entity.Entites.UserPerformanceSummaries", b =>
                {
                    b.HasOne("AkademikAi.Entity.Entites.Topics", "Topic")
                        .WithMany()
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AkademikAi.Entity.Entites.Users", "User")
                        .WithMany("UserPerformanceSummaries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AkademikAi.Entity.Entites.UserRecommendation", b =>
                {
                    b.HasOne("AkademikAi.Entity.Entites.Topics", "Topic")
                        .WithMany()
                        .HasForeignKey("RelatedTopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AkademikAi.Entity.Entites.Users", "User")
                        .WithMany("UserRecommendations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AkademikAi.Entity.Entites.Questions", b =>
                {
                    b.Navigation("QuestionsOptions");

                    b.Navigation("QuestionsTopics");

                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("AkademikAi.Entity.Entites.Topics", b =>
                {
                    b.Navigation("QuestionsTopics");
                });

            modelBuilder.Entity("AkademikAi.Entity.Entites.Users", b =>
                {
                    b.Navigation("UserAnswers");

                    b.Navigation("UserNotifications");

                    b.Navigation("UserPerformanceSummaries");

                    b.Navigation("UserRecommendations");
                });
#pragma warning restore 612, 618
        }
    }
}
